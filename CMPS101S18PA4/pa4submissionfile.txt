Script started on Wed May 30 16:53:09 2018
[?1034hbash-3.2$ pwd
/Users/derrickdebosejr/Desktop/CMPS101S18PA4
bash-3.2$ ls-[K -l
total 80
-rw-r--r--@ 1 derrickdebosejr  staff   402 May 29 13:56 Makefile
-rw-r--r--@ 1 derrickdebosejr  staff  1456 May 30 16:44 NoteToGrader
-rw-r--r--@ 1 derrickdebosejr  staff   478 May 30 16:34 README
-rw-r--r--  1 derrickdebosejr  staff  2102 May 30 16:52 Vector.class
-rw-------@ 1 derrickdebosejr  staff  5478 May 30 16:46 Vector.java
-rw-r--r--  1 derrickdebosejr  staff  2663 May 30 16:52 VectorTest.class
-rwxr-xr-x  1 derrickdebosejr  staff  3125 May 30 16:52 VectorTest.jar
-rw-r--r--@ 1 derrickdebosejr  staff  3721 May 30 16:48 VectorTest.java
-rw-r--r--  1 derrickdebosejr  staff    43 May 30 16:53 pa4submissionfile.txt
bash-3.2$ catR[K README
Derrick DeBose
ID#1536268

VectorTest.java this file is used to test the Vector ADT. The file uses every constructor and method in the Vector ADT

Vector.java is the Vector ADT. The skeleton of the ADT with method prototypes that were given are filled in with additional functionality of 3 methods: cross product, determinant, and print

Makefile used to compile the code

README Current file to explain the files in directory

NoteToGrader a short note to describe my approach.bash-3.2$ cat NoteToGrader
Derrick DeBose
Student #1536268

The default constructor creates a new Vector with no magnitude.

The constructor that takes in an x and a y coordinate for the Vector and computes angle and magnitude.

The polarVector ”constructor" takes an angle and a magnitude for the Vector and solves for x and y values of the Vector

getX() Returns the x coordinate of the Vector.

getY() Returns the y coordinate of the Vector.

getAngle() Returns the angle of the Vector.

getMagnitude() Returns the magnitude of the Vector.

add(Vector other) Returns the sum of this Vector with the given Vector.

subtract(Vector other) Returns the difference between this Vector and the given Vector.

dotProduct(Vector other) Returns the dot product of this Vector and the given Vector.

scalarMultiply(float scalar) Returns this Vector scaled by the given scalar.

normalize() Returns the normalized version of this Vector, a Vector with the same angle with magnitude 1.


Additional Functionality:
 
crossProduct(Vector other) Returns a vector that is the cross product to this Vector and the given Vector. The cross product is tangent to both. The formula is (ad,-bc) where this Vector is (a,b) and the given Vector is (c,d).

determinant(Vector other) Returns a float that is the determinant of this Vector and the given Vector. The formula is ad-bc=determinant where this Vector is (a,b) and the given Vector is (c,d)

print() Returns a string of this vector as (x,y)



bash-3.2$ cat Vector.java
/*
 * CREATED: Derrick DeBose May 29, 2018
 * CHANGED: May 30, 2018
 */

import java.util.*;
import java.io.*;

// Vector.java
// A class that implements the Vector ADT.
//
// For this assignment, you must complete this code skeleton.
// You may not change the function prototypes.
// You are expected to fill in the functions to make them work
// as expected, and you can add as much as you need or want.
// We recommend implementing the Vector ADT using x and y coordinates.

// Notes:
// Angles are always in radians, not degrees.

class Vector {

    // Fields
    float x,y,angle,magnitude;

    // Constructors

    // The default constructor should create a new Vector with no magnitude.
    public Vector() {
        x=0;
        y=0;
        magnitude =0;
    }

    // This constructor takes an x and a y coordinate for the Vector.
    public Vector(float x, float y) {
        this.x = x;
        this.y = y;
        //formula for solving angle from x,y points in quadrant 1
        angle = (float)Math.atan(y/x);
        //if vector is in quadrant 4
        if((angle)>(float)(Math.PI)*3/2 ){
            angle = -(angle);
        }
        //if vector is in quadrant 3
        else if((angle)>(float) (Math.PI) ){
            angle = (angle)- (float)Math.PI;
        }
        //if vector is in quadrant 2
        else if((angle)>(float) (Math.PI)/2 ){
            angle = (float)Math.PI -(angle);
        }
        //magnitude is like solving using pythagorean theorem
        magnitude=(float)Math.sqrt((x*x)+(y*y));
    }

    // This "constructor" takes an angle and a magnitude for the Vector.
    // It is not a traditional constructor because only one function can have
    //   the signature Vector(float, float).
    public static Vector polarVector(float angle, float magnitude) {
        //Make a vector to store the x,y values
        Vector v = new Vector();
        //formula for solving for x and y values given an angle and magnitude
        v.x = (float)Math.cos(angle) * magnitude;
        v.y = (float)Math.sin(angle) * magnitude;
        return v;
    }

    // Access functions

    /** getX
     *  Returns the x coordinate of the Vector.
     */
    public float getX() {
        return x;
    }

    /** getY
     *  Returns the y coordinate of the Vector.
     */
    public float getY() {
        return y;
    }

    /** getAngle
     *  Returns the angle of the Vector.
     */
    public float getAngle() {
        return angle;
    }

    /** getMagnitude
     *  Returns the magnitude of the Vector.
     */
    public float getMagnitude() {
        return magnitude;
    }

    /** add
     *  Returns the sum of this Vector with the given Vector.
     */
    public Vector add(Vector other) {
        float otherX = other.getX();
        float otherY = other.getY();
        //add the x's and y's
        other.x = x + otherX;
        other.y = y + otherY;
        return other;
    }

    /** subtract
     *  Returns the difference between this Vector and the given Vector.
     */
    public Vector subtract(Vector other) {
        float otherX = other.getX();
        float otherY = other.getY();
        //subtract the x's and y's
        other.x = x - otherX;
        other.y = y - otherY;
        return other;
    }

    /** dotProduct
     *  Returns the dot product of this Vector and the given Vector.
     */
    public float dotProduct(Vector other) {
        float product;
        float otherX = other.getX();
        float otherY = other.getY();
        //multiply x and y together
        otherX = otherX * x;
        otherY = otherY * y;
        //add the 2 products
        product = otherX + otherY;
        return product;
    }

    /** scalarMultiply
     *  Returns this Vector scaled by the given scalar.
     */
    public Vector scalarMultiply(float scalar) {
        Vector v = new Vector(getX(),getY());
        v.x= v.x * scalar;
        v.y= v.y * scalar;
        return v;
    }

    /** normalize
     *  Returns the normalized version of this Vector, a Vector with the same
     *    angle with magnitude 1.
     */
    public Vector normalize() {
        Vector v = new Vector(getX(),getY());
        float magnitude = v.getMagnitude();
        //divide the x and y by the magnitude
        v.x = v.x / magnitude;
        v.y = v.y / magnitude;
        return v;
    }

    /** Additional functionality
     *  crossProduct
     *  Returns a vector that is the cross product to this Vector and
     *  the given Vector. The cross product is tangent to both.
     *     formula is (ad,-bc) where this Vector is (a,b) and the given Vector is (c,d)
     */
    public Vector crossProduct(Vector other){
        float tempX, tempY;
        tempX = other.y * x;
        tempY = other.x * y;
        Vector v = new Vector(tempX, -tempY);
        return v;
    }
    
    /** determinant
     *  Returns a float that is the determinant of this Vector and the given Vector.
     *    formula is ad-bc=determinant where this Vector is (a,b) and the given Vector is (c,d)
     */
    public float determinant(Vector other){
        float tempX, tempY;
        tempX = other.y * x;
        tempY = other.x * y;
        tempX= tempX-tempY;
        return tempX;
    }
    
    /**print
     * Returns a string of this vector as (x,y)
     */
    public String print(){
        return " (" + getX() + ", " + getY() + ") ";
    }


    // Manipulation functions
    // None.  Vectors are immutable.

}
bash-3.2$ make
javac -Xlint Vector.java VectorTest.java
echo Main-class: VectorTest > Manifest
jar cvfm VectorTest.jar Manifest VectorTest.class Vector.class 
added manifest
adding: VectorTest.class(in = 2663) (out= 1379)(deflated 48%)
adding: Vector.class(in = 2102) (out= 1141)(deflated 45%)
rm Manifest
chmod +x VectorTest.jar
bash-3.2$ ls -l
total 96
-rw-r--r--@ 1 derrickdebosejr  staff   402 May 29 13:56 Makefile
-rw-r--r--@ 1 derrickdebosejr  staff  1456 May 30 16:44 NoteToGrader
-rw-r--r--@ 1 derrickdebosejr  staff   478 May 30 16:34 README
-rw-r--r--  1 derrickdebosejr  staff  2102 May 30 16:54 Vector.class
-rw-------@ 1 derrickdebosejr  staff  5478 May 30 16:53 Vector.java
-rw-r--r--  1 derrickdebosejr  staff  2663 May 30 16:54 VectorTest.class
-rwxr-xr-x  1 derrickdebosejr  staff  3125 May 30 16:54 VectorTest.jar
-rw-r--r--@ 1 derrickdebosejr  staff  3721 May 30 16:48 VectorTest.java
-rw-r--r--  1 derrickdebosejr  staff  8623 May 30 16:54 pa4submissionfile.txt
bash-3.2$ cat VectorTest.java
/*
 * CREATED: Derrick DeBose May 29, 2018
 * CHANGED: May 30, 2018
 */

import java.util.*;
import java.io.*;

// VectorTest.java
// A classes that uses the Vector ADT
// Uses every method that is in the Vector ADT

class VectorTest{
    public static void main(String[] args){
        
        /* Taking the sum of vectors a and b and storing it in sum vector
         */
        Vector a = new Vector(1,2);
        Vector b = new Vector(1,2);
        Vector sum = new Vector();
        System.out.print("Vector a"+a.print()+"+ Vector b"+b.print());
        sum = a.add(b);
        System.out.println("="+sum.print()+"\n");
        
        /* Taking the difference of vectors c and d and storing it in difference vector
         */
        Vector c = new Vector(12,32);
        Vector d = new Vector(31,12);
        Vector difference = new Vector();
        System.out.print("Vector c"+c.print()+"- Vector d"+d.print());
        difference = c.subtract(d);
        System.out.println("="+difference.print()+"\n");
        
        /* Taking the dot product of vector of e and f and store the answer in product
         */
        Vector e = new Vector(2,4);
        Vector f = new Vector(2,4);
        float product = 0;
        System.out.print("Vector e"+e.print()+"dotted with Vector f"+f.print());
        product = e.dotProduct(f);
        System.out.println("= "+product+"\n");
        
        /* Used for the magnitude and angle test using Vector G
         */
        Vector g = new Vector(3,4);
        System.out.println("The vector"+g.print()+"has the magnitude "+g.getMagnitude()+" and the angle "+g.getAngle()+"\n");
        
        /* Used for the polar vector test using the angle and magnitude
         * to find the x,y points for vector h
         */
        Vector h = new Vector();
        float angle = (float)1.8326;
        float magnitude = 11;
        h= Vector.polarVector(angle, magnitude);
        System.out.println("This is the polar vector "+h.print()+" Using the angle "+angle+" and using the magnitude "+magnitude+"\n");
        
        /* The scalar multilpier test takes vector i and multiplies it by 2
         */
        Vector i = new Vector(12,5);
        System.out.print("This vector will be scalar multiplied"+i.print());
        i = i.scalarMultiply(2);
        System.out.println("by a factor of 2 to get"+ i.print()+"\n");
        
        /* The normalize test shows the orginal vector j (x,y) values  with the angle and magnitude
         * Normalized vector j has different (x,y) values with the same angle and magnitude 1.
         */
        Vector j = new Vector(3,4);
        System.out.println("Vector j has the values"+j.print()+
                           "With an angle of "+j.getAngle()+" and magnitude of " +j.getMagnitude());
        j= j.normalize();
        System.out.println("Normalized Vector j has the values"+j.print()+
                           "With an angle of "+j.getAngle()+" and magnitude of " +j.getMagnitude()+"\n");
        
        /* Taking the cross product of vectors k and l and storing the result in vector m
         */
        Vector k = new Vector(2,3);
        Vector l = new Vector(3,4);
        Vector m = new Vector();
        System.out.print("Vector k"+k.print()+"cross producted with Vector l"+l.print()+"\n");
        m = k.crossProduct(l);
        System.out.println("="+m.print());
        
        /* Takes the determinant of vectors o and p and stores the answer in float n
         */
        float n;
        Vector o = new Vector(12,24);
        Vector p = new Vector(2,3);
        n=o.determinant(p);
        System.out.println("The determinant of Vector o"+o.print()+"and Vector p"+p.print()+"="+n+"\n");
    }
}
bash-3.2$ java -jar ve[K[KVectorTest.jar
Vector a (1.0, 2.0) + Vector b (1.0, 2.0) = (2.0, 4.0) 

Vector c (12.0, 32.0) - Vector d (31.0, 12.0) = (-19.0, 20.0) 

Vector e (2.0, 4.0) dotted with Vector f (2.0, 4.0) = 20.0

The vector (3.0, 4.0) has the magnitude 5.0 and the angle 0.9272952

This is the polar vector  (-2.847055, 10.625172)  Using the angle 1.8326 and using the magnitude 11.0

This vector will be scalar multiplied (12.0, 5.0) by a factor of 2 to get (24.0, 10.0) 

Vector j has the values (3.0, 4.0) With an angle of 0.9272952 and magnitude of 5.0
Normalized Vector j has the values (0.6, 0.8) With an angle of 0.9272952 and magnitude of 5.0

Vector k (2.0, 3.0) cross producted with Vector l (3.0, 4.0) 
= (8.0, -9.0) 
The determinant of Vector o (12.0, 24.0) and Vector p (2.0, 3.0) =-12.0

bash-3.2$ es[Kc[Kxit
exit

Script done on Wed May 30 16:55:14 2018
