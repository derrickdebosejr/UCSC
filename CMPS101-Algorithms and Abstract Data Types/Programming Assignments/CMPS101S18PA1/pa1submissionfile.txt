Script started on Tue Apr 24 23:37:25 2018
[?1034hbash-3.2$ ls
Makefile		README			input.txt
NoteToGrader		apint.class		output.txt
PA1.class		apint.java		pa1submissionfile.txt
PA1.jar			aprat.class
PA1.java		aprat.java
bash-3.2$ cat READE[KME
Derrick DeBose
ID#1536268

apint.java the class apint has methods to add subtract multiply and divide but the character limit for the numbers is 3000 rather than  the number 2,147,483,647.
 
aprat.java the class aprat has methods to add subtract multiply and divide that expresses 2 apints as a numerator and denominator.

PA1.java This is my main code and reads in input.txt and writes to output.txt after completing the different arithmetic methods 

PA1.jar This class is used to make and compile the entire program

input.txt This text has the operations that I will be doing with the numbers

output.txt This text file is written into by PA1 after completing the operations of given from input.txt

Makefile used to compile the code

README Current file to explain the files in directory

NoteToGrader a short note to describe my approach.bash-3.2$ CA[K[Kcat NoteToGrader
Apint methods

Both add and addition methods in my code use the same logic. Starting at the back of the list we add the 2 ints then and then calculate carry based on the sum.

Both subtract and subtraction methods follow the same logic. First determine which number is bigger in size not positive or negative representation. if the second number is larger than the first then we will subtract the second number from the first and set the difference to negative.

Both multi and multiply methods follow the same logic. First determine which number is bigger in size not positive or negative representation. total is calculated by multiplying the 2 apints and adding by the carry at that index then uses a shift method to shift the data in order for there to be zeros at the end to hold multiplication process.

The divide function is a method that counts the amount of times the divisor can be subtracted by the dividend. There are tests to know when to stop subtracting and return the counter. The cases are if the dividend become 0 or switches signs.

The Factorial method uses the subtract and multi function to decrement the number by one and multiply the running total by the decremented number.

The print method checks if the apint passed in is zero then makes a string that removes all the leading zeros in the apint.

Aprat methods

The APRAT function doesnâ€™t work because of lack of time to finish the assignment could finish with another 24hr extension.bash-3.2$ cat PA1.java
import java.util.*;
import java.io.*;
public class PA1{
    public static void main(String[] args) throws IOException{
        if(args.length<2){
            System.out.println("Usage: java -jar PA1.jar <input file> <output file>");
            System.exit(1);
        }
        
        File inFile = new File(args[0]);
        Scanner in = new Scanner(inFile);
        PrintWriter out = new PrintWriter(args[1]);
        int c = -3234871;//can be used to make an apint
        String zero="0";
        while(in.hasNextLine()){
            String line = in.nextLine();
            int length = line.length();
            if(line.contains("+")){//if an add method/ or positive number
                String[] arr = line.split("\\+");//split at the +
                if(arr[0].isEmpty()){//check for just a positive number
                    apint foo = new apint(arr[1]);//one number to deal with
                    out.println(foo.print(foo));
                }else{
                    apint one= new apint(arr[0]);//make one apint
                    apint two= new apint(arr[1]);//make another apint
                    apint s= new apint();//somewhere to store the sum
                    s=s.addition(one,two);//add the numbers
                    out.println(s.print(s));//print the sum
                }
            }else if (line.contains(".")){//if an decimal number
                String[] arr = line.split("\\.");//split at the .
                if(arr[0]== zero||arr[0].isEmpty()){//check for just a 0 in front of decimal or decimal
                    apint one=new apint();//make one apint
                    out.println(one.print(one));//print
                }else {
                    apint one = new apint(arr[0]);//makes an apint with the front number
                    out.println(one.print(one));//print
                }
                
            }
            else if(line.contains("*")){//if a multiply method
                String[] arr = line.split("\\*");//split at the *
                apint one= new apint(arr[0]);
                apint two= new apint(arr[1]);
                apint s= new apint();//somewhere to store the product
                s=s.multiply(one,two);//multiply the numbers
                out.println(s.print(s));//print
            }else if(line.contains("/")){//if a divide method
                String[] arr = line.split("\\/");//split at the /
                apint one= new apint(arr[0]);
                apint two= new apint(arr[1]);
                apint s= new apint();//somewhere to store the quotient
                s=s.divide(one,two);//divide the numbers
                out.println(s.print(s));//print
            }else if(line.contains("-")){// if negative number or subtraction
                String[] arr = line.split("\\-");//split at the -
                int len = arr.length;
                if(arr[0].isEmpty()){//check for a negative number
                    apint foo = new apint(line);//make the number
                    out.println(foo.print(foo));//print
                }else{//need to subtract
                    apint one= new apint(arr[0]);
                    apint two= new apint(arr[1]);
                    apint s= new apint();//somewhere to store the difference
                    s=s.subtraction(one,two);//subtract the numbers
                    out.println(s.print(s));//print
                }
            }else if(line.contains("!")){//if a factorial function
                String[] arr = line.split("\\!");//split at the !
                apint fact= new apint(arr[0]);
                int factor = Integer.parseInt(arr[0]);// an int is passed to factorial
                fact=fact.factorial(factor);//do the factorial operation
                out.println(fact.print(fact));//print
            }
            else{//else just print out the number
                apint foo = new apint(line);
                out.println(foo.print(foo));
            }
        }
        in.close();
        out.close();
    }
}
bash-3.2$ cat apit[Knt.java

public class apint{
    static final int MAXARRAY = 3000;
    int[] number = new int[MAXARRAY];
    String num;
    int numberlen;
    boolean negative = false;
    apint(){//default constructor, allocates memory for apint
        int[] number= new int[MAXARRAY];
    }
    apint(String num){//converts a string of ints to an apint that has a flag to determine if number is negative or not
        this.num=num;//intialize the string of numbers
        char c[] = num.toCharArray();
        int str= c.length-1;
        int[] number= new int[MAXARRAY];
        if(c[0]== '-'){//checks if the string is negative or not
            negative=true;
        }
        int counter =MAXARRAY-1;
        for(int j = str;j >=0;j--){//start at the back of the string
            if(c[j]== '-'){
                number[counter] = (c[j]-'-');//cant hold a '-' in an array of ints
            }else{
                number[counter]= (c[j] -'0');//converts character ascii value to a number
                counter--;
            }
        }
        
        numberlen=MAXARRAY-1-counter;
        this.number=number;//intialize the array of ints
        
    }
    apint(int a){//creates an apint from an int
        String str = String.valueOf(a);//same logic in this method as the constructor with the string
        num=str;
        
        char c[] = str.toCharArray();
        int strlen= c.length-1;
        int[] number= new int[MAXARRAY];
        if(c[0]== '-'){//checks if the string is negative or not
            negative=true;
        }
        int counter =MAXARRAY-1;
        for(int j = strlen;j >=0;j--){//start at the back of the string
            if(c[j]== '-'){
                number[counter] = (c[j]-'-');//cant hold a '-' in an array of ints
            }else{
                number[counter]= (c[j] -'0');//converts character ascii value to a number
                counter--;
            }
        }
        
        numberlen=MAXARRAY-1-counter;
        this.number=number;
    }
    apint(int[] a){//method is used in the factorial function to make a new apint from an array of ints
        
        number=a;
    }
    String print(apint a){//Print method to make the apint look pretty without all the leading zeros
        int[] str = a.getNumber();
        String s = "";//make an empty string
        int counter =0;//counter is used to determine the when the leadings 0s need to be removed
        String zero = "0";
        if(a.Negative()){
            s= s+"-";//add a negative sign to the front of empty string if negative
        }
        while(str[counter]==0){//checks ends when has passed all the leading zeros
            counter++;
            if (counter==MAXARRAY){//if made it to the max array then there is a 0 stored
                return zero;
            }
        }
        for(int i =0+counter;i<MAXARRAY; i++){//starts from counter to maxarray
            s=s+str[i];//add number to the back of string
        }
        return s;


    }
    int getNumLen(){//method to figure out the length of the number
        return numberlen;
    }
    String getNum(){//method to get the string in the class
        return num;
    }
    int[] getNumber(){//method to get the array of ints
        return number;
    }
    boolean Negative(){//determines if int is negative or positive
        return negative;
    }
    apint addition(apint first, apint second){//method to add 2 apints
        int[] a = first.getNumber();
        int[] b = second.getNumber();
        apint sum = new apint();//apint to store the running sum throughout the method
        int[] n = sum.getNumber();
        int carry=0;//used to determine what needs to be carried
        int total=0;//used as a temp to determine int needs to be stored in the array
        int i =MAXARRAY-1;//start at the back of the list to add
        while(i>=0){
            total=a[i]+b[i]+carry;//total is the addition of the 2 numbers including the carry
            n[i]= total%10;//if total is  15 or 25, n[i]=5
            total=total/10;//if total is 15 or 25, total 1,2
            carry= total%10;//carry is now the total mod 10 count
            i--;//decrement i
        }
        return sum;// return the apint of the number
    }
    int[] add(int[] a, int[] b){// method is the same as the addition method except has 
        int[] n = new int[MAXARRAY];//array of int to store the running sum throughout the method
        int carry=0;//used to determine what needs to be carried
        int total=0;//used as a temp to determine int needs to be stored in the array
        int i =MAXARRAY-1;//start at the back of the list to add
        while(i>=0){
            total=a[i]+b[i]+carry;//total is the addition of the 2 numbers including the carry
            n[i]= total%10;//if total is  15 or 25, n[i]=5
            total=total/10;//if total is 15 or 25, total 1,2
            carry= total%10;//carry is now the total mod 10 count
            i--;//decrement i
        }
        return n;//Return the array of ints
    }
    int[] subtract(int[] a, int[] b){//subracts 2 array of ints rather than apints becuase used in methods as a sub method
        int[] n = new int[MAXARRAY];
        int carry=0;
        for(int i=0;i<=MAXARRAY-1;i++){
            if(a[i]>b[i]){//if a is bigger in size
                for(int j = MAXARRAY-1;j >= 0;j--){//start from the back of the array
                    if((a[j]+carry)>=b[j]){//we can just subtract if the top item is larger
                        n[j]=a[j]-b[j]+carry;//subtract and include the carry
                        carry =0;//carry must be 0
                    }
                    else{//if i need to carry and b is bigger than a
                        a[j]=a[j]+10;//add 10 to the top function is equivalent to carrying
                        n[j]=a[j]-b[j]+carry;//then you may subtract
                        carry = -1;//carry a -1 if need to be carried
                        
                    }
                }
                break;//escape the i for loop
            }
            
            
            if(b[i]>a[i]){//if b is bigger in size
                for(int j = MAXARRAY-1;j >= 0;j--){//start from the back of the array
                    if((b[j]+carry)>=a[j]){//subtract the bigger number by smaller one and set to negative
                        n[j]=b[j]-a[j]+carry;//subtract and include the carry
                        carry =0;//carry must be 0
                    }
                    else{//if i need to carry and b is bigger than a
                        b[j]=b[j]+10;//add 10 to the top function is equivalent to carrying
                        n[j]=b[j]-a[j]+carry;//then you may subtract
                        carry = -1;//carry a -1 if need to be carried
                        
                    }
                }
                break;//escape the i for loop
            }
        }
        return n;
    }
    apint subtraction(apint first, apint second){//subracts 2 apints
        int[] a = first.getNumber();
        int[] b = second.getNumber();
        apint difference = new apint();//used to store the difference of the 2 apints
        int[] n = difference.getNumber();
        int carry=0;
        for(int i=0;i<=MAXARRAY-1;i++){
            if(a[i]>b[i]){//if a is bigger in size
                difference.negative=false;//then difference must not be negative
                for(int j = MAXARRAY-1;j >= 0;j--){//start from the back of the array
                    if((a[j]+carry)>=b[j]){//we can just subtract if the top item is larger
                        n[j]=a[j]-b[j]+carry;//subtract and include the carry
                        carry =0;//carry must be 0
                    }
                    else{//if i need to carry and b is bigger than a
                        a[j]=a[j]+10;//add 10 to the top function is equivalent to carrying
                        n[j]=a[j]-b[j]+carry;//then you may subtract
                        carry = -1;//carry a -1 if need to be carried
                        
                    }
                }
                break;//escape the i for loop
            }
            
            
            if(b[i]>a[i]){//if b is bigger in size
                difference.negative = true;//then difference must be negative
                for(int j = MAXARRAY-1;j >= 0;j--){//start from the back of the array
                    if((b[j]+carry)>=a[j]){//subtract the bigger number by smaller one and set to negative
                        n[j]=b[j]-a[j]+carry;//subtract and include the carry
                        carry =0;//carry must be 0
                    }
                    else{//if i need to carry and a is bigger than b
                        b[j]=b[j]+10;//add 10 to the larger function is equivalent to carrying
                        n[j]=b[j]-a[j]+carry;//then you may subtract
                        carry = -1;//carry a -1 if need to be carried
                        
                    }
                }
                break;//escape the i for loop
            }
        }
        return difference;
    }
    int[] shift(int[] a, int b){//used to shift an int array by b elements to b 0s at the end of the array
        int[] temp = new int[MAXARRAY];
        for (int i= MAXARRAY-1;i>=0+b;i--){// start at the back of the array and stop when there are b zeros at the end
            temp[i-b] = a[i];//shifts the data in the temp array
        }
        return temp; //return out shifted data
    }
    int[] append(int[] a, int b){//used to add int b at the end of the list
        int[] temp = new int[MAXARRAY];
        for (int i= MAXARRAY-1;i>=0;i--){//start from the back of the list
            temp[i-1] = a[i];//shift the data in the array of by one
        }
        temp[MAXARRAY-1]=b;// set the last element in the array to b
        return temp;//return our appended data
    }
    apint divide(apint dividend, apint divisor){//solved by counting the amount of subtractions
        int[] a = dividend.getNumber();
        int[] b = divisor.getNumber();
        apint quotient = new apint();//allocate memory for our quotient
        int[] n = quotient.getNumber();
        apint adder = new apint();//used to add or subtract by one
        adder.number[MAXARRAY-1]=1;
        if(dividend.Negative()==divisor.Negative()){//a test for negative a number
            
        }else{
            quotient.negative = true;
        }
        if(dividend.Negative()){//check to see if the dividend is negative or not
            while(dividend.Negative()){//while the dividend is negative
                
                dividend=subtraction(dividend,divisor);//subtract the dividend and divisor
                quotient=addition(quotient,adder);//add one to the quotient since there was a successful subtraction
                for (int i =0;i<=MAXARRAY-1;i++){//check to see if the dividend = 0
                    if(dividend.number[i] != 0){//continue in the while if dividend is not 0
                        break;
                    }else if(i==MAXARRAY-1){//case where it is a perfect divide
                        break;
                        
                    }else if(!dividend.Negative()){// case where there dividend is smaller than the divisor
                        quotient=subtraction(quotient,adder);//subtract one to get the lower bound
                        i=MAXARRAY-1;//need to leave this for loop
                    }
                }
            }
            
        }else if(!dividend.Negative()){//check to see if the dividend is negative or not
            while(!dividend.Negative()){//while the dividend is negative
                
                dividend=subtraction(dividend,divisor);//subtract the dividend and divisor
                quotient=addition(quotient,adder);//add one to the quotient since there was a successful subtraction
                for (int i =0;i<=MAXARRAY-1;i++){//check to see if the dividend = 0
                    if(dividend.number[i] != 0){//continue in the while if dividend is not 0
                        break;
                    }else if(i==MAXARRAY-1){//case where it is a perfect divide
                        break;
                    }else if(dividend.Negative()){// case where there dividend is smaller than the divisor
                        quotient=subtraction(quotient,adder);//subtract one to get the lower bound
                        i=MAXARRAY-1;//need to leave this for loop

                    }
                }
            }
            
        }
        return quotient;
    }
    int[] multi(int[]a,int[]b){//like the multiply fuction but its used in my factorial function
        int[] n = new int[MAXARRAY];
        int carry=0;
        int counter =0;
        int[] total = new int[MAXARRAY];
        for(int j=MAXARRAY-1;j>=0;j--){
            for(int k=MAXARRAY-1;k>=0;k--){
                total[k]=(a[k]*b[j]+carry);//multipy a and b and add carry
                carry = total[k]/10;//carry is total over 10 for example if total is 54 then carry is 5
                total[k]= total[k]%10;//mod by 10 to get rid of the higher order terms
            }
            total=shift(total,MAXARRAY-1-j);//method to know how much to shift data to the left
            n= add(total,n);//add the total of the mulitpy and n is the running total of the whole process
        }
        return n;
    }
    apint multiply(apint first,apint second){
        int[] a = first.getNumber();
        int[] b = second.getNumber();
        apint product = new apint();
        int[] n = product.getNumber();
        int carry=0;
        int counter =0;
        int[] total = new int[MAXARRAY];
        if(first.Negative()==second.Negative()){//test to figure out if product is negative or not
            
        }else{
            product.negative = true;
        }
        for(int i=0;i<=MAXARRAY-1;i++){//loop to figure out which operation goes on top and which goes on the bottom
            if(a[i]>b[i]){//if the first apint element is larger
                for(int j=MAXARRAY-1;j>=0;j--){
                    for(int k=MAXARRAY-1;k>=0;k--){
                        total[k]=(a[k]*b[j]+carry);//multipy a and b and add carry
                        carry = total[k]/10;//carry is total over 10 for example if total is 54 then carry is 5
                        total[k]= total[k]%10;//mod by 10 to get rid of the higher order terms
                    }
                    total=shift(total,MAXARRAY-1-j);//method to know how much to shift data to the left
                    n= add(total,n);//add the total of the mulitpy and n is the running total of the whole process
                }
                product.number = n;
                return product;
            }
            if(b[i]>a[i]){//if the second apint element is larger
                for(int j=MAXARRAY-1;j>=0;j--){
                    for(int k=MAXARRAY-1;k>=0;k--){
                        total[k]=(a[k]*b[j]+carry);//multipy a and b and add carry
                        carry = total[k]/10;//carry is total over 10 for example if total is 54 then carry is 5
                        total[k]= total[k]%10;//mod by 10 to get rid of the higher order terms
                    }
                    total=shift(total,MAXARRAY-1-j);//method to know how much to shift data to the left
                    n= add(total,n);//add the total of the mulitpy and n is the running total of the whole process
                }
                product.number = n;
                return product;
            }
        }
        return product;
    }
    apint factorial(int one){//method to handle 1000! and passes in an int because factorial wont happen with numbers bigger than the int max
        apint alpha = new apint(one);//
        int[] a = alpha.number;
        int[] b = new int[MAXARRAY];
        b[MAXARRAY-1]=1;//used to decrement one to figure out when to stop multiplying

        apint tot = new apint(one);//total starts at one
        int[] total = tot.number;
        
        for(int i=one-2;i>=0;i--){//subtract by 2 becuase you dont need to multiply by one at the end of the factorial function
            a = subtract(a,b);//subtract the count by one
            total = multi(a,total);//multiply the running total and the number in a we are at.
            
        }
        apint fact = new apint(total);// make an apint with total stored in it
        
        return fact;//return the product of the factorial function
    }

}
bash-3.2$ cataprat[K[K[K[K[K aprat.java
public class aprat extends apint{
    apint numerator = new apint();
    apint denominator = new apint();
    aprat(apint numerator, apint denominator){
        this.numerator=numerator;
        this.denominator=denominator;
    }
}
bash-3.2$ make
make: Nothing to be done for `all'.
bash-3.2$ ;s[K[Kls
Makefile		README			input.txt
NoteToGrader		apint.class		output.txt
PA1.class		apint.java		pa1submissionfile.txt
PA1.jar			aprat.class
PA1.java		aprat.java
bash-3.2$ cat input.txt
5183123456789023456789090987654332134567098765471+493456789089765436788371
41091238473204830941882742983*32417865819783945718
11329581432140923749801385710792837187231-1454123423412343245231
652124351/145134114513
1235125403408712489701932847183561
-43543678909786756435
+5436578908978675454789
52814315135143/13415435154
1000!
519458112341230483158974395870434013298341.1235857123940718230948
0.3108936410873810bash-3.2$ m[Kcat output.txt
5183123456789023456789091481111121224332535553842
1332090255193097936824919934208360681296617396794
11329581432140923748347262287380493942000
0
1235125403408712489701932847183561
-43543678909786756435
5436578908978675454789
3936
402387260077093773543702433923003985719374864210714632543799910429938512398629020592044208486969404800479988610197196058631666872994808558901323829669944590997424504087073759918823627727188732519779505950995276120874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835955735432513185323958463075557409114262417474349347553428646576611667797396668820291207379143853719588249808126867838374559731746136085379534524221586593201928090878297308431392844403281231558611036976801357304216168747609675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164365024153691398281264810213092761244896359928705114964975419909342221566832572080821333186116811553615836546984046708975602900950537616475847728421889679646244945160765353408198901385442487984959953319101723355556602139450399736280750137837615307127761926849034352625200015888535147331611702103968175921510907788019393178114194545257223865541461062892187960223838971476088506276862967146674697562911234082439208160153780889893964518263243671616762179168909779911903754031274622289988005195444414282012187361745992642956581746628302955570299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933061690897968482590125458327168226458066526769958652682272807075781391858178889652208164348344825993266043367660176999612831860788386150279465955131156552036093988180612138558600301435694527224206344631797460594682573103790084024432438465657245014402821885252470935190620929023136493273497565513958720559654228749774011413346962715422845862377387538230483865688976461927383814900140767310446640259899490222221765904339901886018566526485061799702356193897017860040811889729918311021171229845901641921068884387121855646124960798722908519296819372388642614839657382291123125024186649353143970137428531926649875337218940694281434118520158014123344828015051399694290153483077644569099073152433278288269864602789864321139083506217095002597389863554277196742822248757586765752344220207573630569498825087968928162753848863396909959826280956121450994871701244516461260379029309120889086942028510640182154399457156805941872748998094254742173582401063677404595741785160829230135358081840096996372524230560855903700624271243416909004153690105933983835777939410970027753472000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
519458112341230483158974395870434013298341
0
bash-3.2$ cat output.txt[1Pinput.txt[C[C[C[C[C[C[C[C[C[Cls[Kmakecat aprat.javaint.java[2PPA1.javaNoteToGrader[6PREADMEls[Kexitjava -jar PA1.jar input.txt output.txt[C[C[C[C[C[C[C[C[C[Cmake[Kcat aprat.java[C[C[C[C[C[C[C[C[C[Cmake[Kjava -jar PA1.jar input.txt output.txt
bash-3.2$ exit
exit

Script done on Tue Apr 24 23:40:55 2018
