Script started on Wed May 16 22:35:23 2018
[?1034hbash-3.2$ pwd
/Users/derrickdebosejr/Desktop/CMPS101S18PA3
bash-3.2$ ls -l
total 3840
-rw-r--r--  1 derrickdebosejr  staff     2279 May 16 22:25 Anagram.class
-rw-r--r--@ 1 derrickdebosejr  staff     6790 May 16 21:34 Anagram.java
-rw-r--r--  1 derrickdebosejr  staff     1820 May 16 22:25 FindAnagrams.class
-rwxr-xr-x  1 derrickdebosejr  staff     2746 May 16 22:25 FindAnagrams.jar
-rw-r--r--@ 1 derrickdebosejr  staff     2965 May 16 22:35 FindAnagrams.java
-rw-r--r--@ 1 derrickdebosejr  staff      413 May 16 15:25 Makefile
-rw-r--r--@ 1 derrickdebosejr  staff      557 May 16 21:38 NoteToGrader
-rw-r--r--@ 1 derrickdebosejr  staff     1057 May 16 22:34 README
-rw-r--r--@ 1 derrickdebosejr  staff       43 May 16 22:35 pa3submissionfile.txt
-rw-------@ 1 derrickdebosejr  staff  1923517 May 16 12:59 wordList.txt
bash-3.2$ cat README
Derrick DeBose


Anagram.java is the ADT that creates anagrams. A new anagram can be made with a string or a char array. A key is made for the anagram based on each letter being assigned a unique prime number that is multiplied together to make a unique factorization. Print returns the string in the anagram ADT and compare return true if the 2 anagrams passed in are anagrams of each other.

FindAnagrams.java is the main codes that tests the Anagram ADT. The program reads in an input textfile that has the words of the dictionary in it. Each of those strings is converted into an anagram and added to an arraylist. After user input happens then the string is converted into an anagram. The user input anagram is compared with a key with each anagram in the arraylist.

wordList.txt which is an input text file that will be used to test if a user input string is an anagram of a word in the text file 

Makefile used to compile the code

README Current file to explain the files in directory

NoteToGrader a short note to describe my approach.
bash-3.2$ cat NoteToGraader[1Pder
Derrick DeBose


My methods to make a new Anagram use a constructor that takes in an array of char or a string and assigns a prime number to each letter and the product of the primes creates a unique factorization and the product is used as the key to compare if words are Anagrams.

The print method just returns the string of the anagram that was passed in, and can simply be put in a println statement

The compare method compares 2 anagrams passed in as parameters and compares if the 2 anagrams have the same key and runs in O(1) time.
bash-3.2$ cat Anaf[Kgram.java
/*
 CREATED: Derrick DeBose May 14, 2018
 CHANGED: May 16, 2018
 
 Anagram.java is the ADT that creates anagrams. A new anagram can be made with a string or a char array.
 A key is made for the anagram based on a unique factorization for each anagram because each letter is
 assigned a unique prime number. Print returns the string in the anagram ADT and compare return true if
 the 2 anagrams passed in are anagrams of each other.

*/
class Anagram{
    int key = 1;//key needs to intialized to 1 because if it were 0 all of our keys would be 0
    String str;//the string of the anagram
    
    /*
     this constructor takes in a String and assigns a prime number to each letter and the product of the
     primes creates a unique factorization
     */
    Anagram(String str){
        char[] c = str.toCharArray();
        this.str=str;
        //assigns a prime number to each letter.A product of primes is a unique factoriztorization
        for(int i=0;i<c.length;i++){
            switch (c[i]){
                case 'A':
                case 'a': key = key * 2;//first prime number
                
                case 'B':
                case 'b': key = key * 3;//second prime number
                
                case 'C':
                case 'c': key = key * 5;
                
                case 'D':
                case 'd': key = key * 7;
                
                case 'E':
                case 'e': key = key * 11;
                
                case 'F':
                case 'f': key = key * 13;
                
                case 'G':
                case 'g': key = key * 17;
                
                case 'H':
                case 'h': key = key * 19;
                
                case 'I':
                case 'i': key = key * 23;
                
                case 'J':
                case 'j': key = key * 29;
                
                case 'K':
                case 'k': key = key * 31;
                
                case 'L':
                case 'l': key = key * 37;
                
                case 'M':
                case 'm': key = key * 41;
                
                case 'N':
                case 'n': key = key * 43;
                
                case 'O':
                case 'o': key = key * 47;
                
                case 'P':
                case 'p': key = key * 53;
                
                case 'Q':
                case 'q': key = key * 59;
                
                case 'R':
                case 'r': key = key * 61;
                
                case 'S':
                case 's': key = key * 67;
                
                case 'T':
                case 't': key = key * 71;
                
                case 'U':
                case 'u': key = key * 73;
                
                case 'V':
                case 'v': key = key * 79;
                
                case 'W':
                case 'w': key = key * 83;
                
                case 'X':
                case 'x': key = key * 89;
                
                case 'Y':
                case 'y': key = key * 97;
                
                case 'Z':
                case 'z': key = key * 101;
                
            }//end switch
        }//end for loop
    }//end constructor
    
    /*
    this constructor takes in an array of char and assigns a prime number to each letter and the product of the
    primes creates a unique factorization
    */
    Anagram(char[] c){
        str = new String(c);
        for(int i=0;i<c.length;i++){//got through the entire string
            //assigns a prime number to each letter. A product of primes is a unique factoriztorization
            switch (c[i]){
                case 'A':
                case 'a': key = key * 2;
                    
                case 'B':
                case 'b': key = key * 3;
                    
                case 'C':
                case 'c': key = key * 5;
                    
                case 'D':
                case 'd': key = key * 7;
                    
                case 'E':
                case 'e': key = key * 11;
                    
                case 'F':
                case 'f': key = key * 13;
                    
                case 'G':
                case 'g': key = key * 17;
                    
                case 'H':
                case 'h': key = key * 19;
                    
                case 'I':
                case 'i': key = key * 23;
                    
                case 'J':
                case 'j': key = key * 29;
                    
                case 'K':
                case 'k': key = key * 31;
                    
                case 'L':
                case 'l': key = key * 37;
                    
                case 'M':
                case 'm': key = key * 41;
                    
                case 'N':
                case 'n': key = key * 43;
                    
                case 'O':
                case 'o': key = key * 47;
                    
                case 'P':
                case 'p': key = key * 53;
                    
                case 'Q':
                case 'q': key = key * 59;
                    
                case 'R':
                case 'r': key = key * 61;
                    
                case 'S':
                case 's': key = key * 67;
                    
                case 'T':
                case 't': key = key * 71;
                    
                case 'U':
                case 'u': key = key * 73;
                    
                case 'V':
                case 'v': key = key * 79;
                    
                case 'W':
                case 'w': key = key * 83;
                    
                case 'X':
                case 'x': key = key * 89;
                    
                case 'Y':
                case 'y': key = key * 97;
                    
                case 'Z':
                case 'z': key = key * 101;
                    
            }//end switch
        }//end for loop
    }//end constructor
    
    /*
    The print method returns the string stored in the anagram
    */
    String print(Anagram a){
        
        return a.str;//return the string of the anagram
    }
    
    /*
    The compare method compares 2 anagrams passed in the parameters based on their keys and runs in O(1) time.
    */
    Boolean compare(Anagram a, Anagram b){
        if(a.key==b.key){// if the keys are the same
            if(a.str.compareTo(b.str)!=0){//if anagrams check to see if the strings aren't the same string
                return true;
            }
            return false;
        }
        else{
            return false;
        }
    }
    
}
bash-3.2$ make
javac -Xlint FindAnagrams.java Anagram.java
Anagram.java:28: warning: [fallthrough] possible fall-through into case
                case 'B':
                ^
Anagram.java:31: warning: [fallthrough] possible fall-through into case
                case 'C':
                ^
Anagram.java:34: warning: [fallthrough] possible fall-through into case
                case 'D':
                ^
Anagram.java:37: warning: [fallthrough] possible fall-through into case
                case 'E':
                ^
Anagram.java:40: warning: [fallthrough] possible fall-through into case
                case 'F':
                ^
Anagram.java:43: warning: [fallthrough] possible fall-through into case
                case 'G':
                ^
Anagram.java:46: warning: [fallthrough] possible fall-through into case
                case 'H':
                ^
Anagram.java:49: warning: [fallthrough] possible fall-through into case
                case 'I':
                ^
Anagram.java:52: warning: [fallthrough] possible fall-through into case
                case 'J':
                ^
Anagram.java:55: warning: [fallthrough] possible fall-through into case
                case 'K':
                ^
Anagram.java:58: warning: [fallthrough] possible fall-through into case
                case 'L':
                ^
Anagram.java:61: warning: [fallthrough] possible fall-through into case
                case 'M':
                ^
Anagram.java:64: warning: [fallthrough] possible fall-through into case
                case 'N':
                ^
Anagram.java:67: warning: [fallthrough] possible fall-through into case
                case 'O':
                ^
Anagram.java:70: warning: [fallthrough] possible fall-through into case
                case 'P':
                ^
Anagram.java:73: warning: [fallthrough] possible fall-through into case
                case 'Q':
                ^
Anagram.java:76: warning: [fallthrough] possible fall-through into case
                case 'R':
                ^
Anagram.java:79: warning: [fallthrough] possible fall-through into case
                case 'S':
                ^
Anagram.java:82: warning: [fallthrough] possible fall-through into case
                case 'T':
                ^
Anagram.java:85: warning: [fallthrough] possible fall-through into case
                case 'U':
                ^
Anagram.java:88: warning: [fallthrough] possible fall-through into case
                case 'V':
                ^
Anagram.java:91: warning: [fallthrough] possible fall-through into case
                case 'W':
                ^
Anagram.java:94: warning: [fallthrough] possible fall-through into case
                case 'X':
                ^
Anagram.java:97: warning: [fallthrough] possible fall-through into case
                case 'Y':
                ^
Anagram.java:100: warning: [fallthrough] possible fall-through into case
                case 'Z':
                ^
Anagram.java:119: warning: [fallthrough] possible fall-through into case
                case 'B':
                ^
Anagram.java:122: warning: [fallthrough] possible fall-through into case
                case 'C':
                ^
Anagram.java:125: warning: [fallthrough] possible fall-through into case
                case 'D':
                ^
Anagram.java:128: warning: [fallthrough] possible fall-through into case
                case 'E':
                ^
Anagram.java:131: warning: [fallthrough] possible fall-through into case
                case 'F':
                ^
Anagram.java:134: warning: [fallthrough] possible fall-through into case
                case 'G':
                ^
Anagram.java:137: warning: [fallthrough] possible fall-through into case
                case 'H':
                ^
Anagram.java:140: warning: [fallthrough] possible fall-through into case
                case 'I':
                ^
Anagram.java:143: warning: [fallthrough] possible fall-through into case
                case 'J':
                ^
Anagram.java:146: warning: [fallthrough] possible fall-through into case
                case 'K':
                ^
Anagram.java:149: warning: [fallthrough] possible fall-through into case
                case 'L':
                ^
Anagram.java:152: warning: [fallthrough] possible fall-through into case
                case 'M':
                ^
Anagram.java:155: warning: [fallthrough] possible fall-through into case
                case 'N':
                ^
Anagram.java:158: warning: [fallthrough] possible fall-through into case
                case 'O':
                ^
Anagram.java:161: warning: [fallthrough] possible fall-through into case
                case 'P':
                ^
Anagram.java:164: warning: [fallthrough] possible fall-through into case
                case 'Q':
                ^
Anagram.java:167: warning: [fallthrough] possible fall-through into case
                case 'R':
                ^
Anagram.java:170: warning: [fallthrough] possible fall-through into case
                case 'S':
                ^
Anagram.java:173: warning: [fallthrough] possible fall-through into case
                case 'T':
                ^
Anagram.java:176: warning: [fallthrough] possible fall-through into case
                case 'U':
                ^
Anagram.java:179: warning: [fallthrough] possible fall-through into case
                case 'V':
                ^
Anagram.java:182: warning: [fallthrough] possible fall-through into case
                case 'W':
                ^
Anagram.java:185: warning: [fallthrough] possible fall-through into case
                case 'X':
                ^
Anagram.java:188: warning: [fallthrough] possible fall-through into case
                case 'Y':
                ^
Anagram.java:191: warning: [fallthrough] possible fall-through into case
                case 'Z':
                ^
50 warnings
echo Main-class: FindAnagrams > Manifest
jar cvfm FindAnagrams.jar Manifest FindAnagrams.class Anagram.class 
added manifest
adding: FindAnagrams.class(in = 1820) (out= 1114)(deflated 38%)
adding: Anagram.class(in = 2279) (out= 1019)(deflated 55%)
rm Manifest
chmod +x FindAnagrams.jar
bash-3.2$ ls -l
total 3864
-rw-r--r--  1 derrickdebosejr  staff     2279 May 16 22:36 Anagram.class
-rw-r--r--@ 1 derrickdebosejr  staff     6790 May 16 21:34 Anagram.java
-rw-r--r--  1 derrickdebosejr  staff     1820 May 16 22:36 FindAnagrams.class
-rwxr-xr-x  1 derrickdebosejr  staff     2746 May 16 22:36 FindAnagrams.jar
-rw-r--r--@ 1 derrickdebosejr  staff     2965 May 16 22:35 FindAnagrams.java
-rw-r--r--@ 1 derrickdebosejr  staff      413 May 16 15:25 Makefile
-rw-r--r--@ 1 derrickdebosejr  staff      557 May 16 21:38 NoteToGrader
-rw-r--r--@ 1 derrickdebosejr  staff     1057 May 16 22:34 README
-rw-r--r--@ 1 derrickdebosejr  staff    14294 May 16 22:36 pa3submissionfile.txt
-rw-------@ 1 derrickdebosejr  staff  1923517 May 16 12:59 wordList.txt
bash-3.2$ cat FindAnagrams,java[C[1Pjava.java
/*
 CREATED: Derrick DeBose May 14, 2018
 CHANGED: May 16, 2018
 
 FindAnagrams.java is the main codes that tests the Anagram ADT.
 The program reads in an input textfile that has the words of the dictionary in it.
 Each of those strings is converted into an anagram and added to an arraylist.
 After user input happens then the string is converted into an anagram.
 The user input anagram is compared with a key with each anagram in the arraylist.

*/
import java.util.*;
import java.io.*;

class FindAnagrams{
    public static void main(String[] args){
        
        if(args.length != 1) {//for correct amount of files read in
            System.out.println("Usage: java -jar PA3.jar <input text file>");
            System.exit(1);
        }
        try{//try block to be able to catch a file not found exception
            File inText = new File(args[0]);//file for input text file
            Scanner textFile = new Scanner(inText);//reads in text file
            Scanner in = new Scanner(System.in);//used to read in user input
            ArrayList<Anagram> list = new ArrayList<Anagram>();//an arraylist to hold my anagrams
            while (textFile.hasNextLine()) {//reads the text file in one line at a time
                String line = textFile.nextLine();//Input in string
                line = line.toLowerCase();
                Anagram a= new Anagram(line);//creates a new anagram from a string parameter
                list.add(a);//add current word in text file to the arraylist
            }
            System.out.println("type a string of letters");//intialize user input
            while (in.hasNextLine()){//reads in the scanner one line at a time
                
                String str = in.nextLine();//String generated from user input
                str = str.toLowerCase();//makes all the letters lower case
                if(str.equals("N")||str.equals("n")){//used to exit code
                    return;
                }else if(str.equals("Y")||str.equals("y")){//if you want to scan another anagram
                    System.out.println("type a string of letters");
                    in = in.reset();//resets scanner
                }else{
                    Anagram a = new Anagram(str);//makes an anagram from a string
                
                    for(int i=0; i<list.size();i++){//iterate through arraylist of anagrams
                        Anagram b = list.get(i);//get at the anagram at the current place in the loop
                        if(a.compare(a,b)){//compares the keys of anagrams
                            System.out.println(b.print(b));//print out the anagram in the list
                        }
                    }
                    System.out.println("Do another (y/n)?");
                }
            }
        }
        catch(FileNotFoundException e){//used to catch a file not found exception
            System.out.println("FileNotFoundException");
        }
    }
}
bash-3.2$ cat FindAnagrams.java
[C[C[C[C[C[C[C[C[C[Cls -l[K[1Pmakecat Anagram.javaNoteToGrader[6PREADME[5Pls -l[2Ppwdexitjava -jar FindAnagrams.jar wordList.txt
[C[C[C[C[C[C[C[C[C[C[23Pcat[C[C[C[C[C[C[C[C[C[C[C[C[C
[C[C[C[C[C[C[C[C[C[C[23@java -jar FindAnagrams.jar[C[C[C[C[C[C[C[C[C[C[C[C[C
type a string of letters
iTeMs
emits
metis
mites
smite
stime
times
Do another (y/n)?
h Y
type a string of letters
east
ates
eats
etas
sate
seat
seta
teas
Do another (y/n)?
y
type a string of letters
least     LEAST
setal
slate
stale
steal
stela
taels
tales
teals
tesla
Do another (y/n)?
y
type a string of letters
artS
rats
star
tars
tsar
Do another (y/n)?
n
bash-3.2$ exit
exit

Script done on Wed May 16 22:39:35 2018
