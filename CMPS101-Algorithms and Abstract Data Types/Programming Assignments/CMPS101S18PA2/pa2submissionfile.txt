Script started on Wed May  2 21:55:19 2018
[?1034hbash-3.2$ pwd
/Users/derrickdebosejr/Desktop/CMPS101S18PA2
bash-3.2$ ls -l
total 1440
-rw-r--r--@ 1 derrickdebosejr  staff     624 Apr 26 11:12 Makefile
-rw-r--r--@ 1 derrickdebosejr  staff    1616 May  2 21:43 NoteToGrader
-rwxr-xr-x  1 derrickdebosejr  staff   13228 May  2 21:53 PA2
-rw-r--r--@ 1 derrickdebosejr  staff    4406 May  2 21:20 PA2.c
-rw-r--r--  1 derrickdebosejr  staff    4868 May  2 21:53 PA2.o
-rw-r--r--@ 1 derrickdebosejr  staff     574 Apr 30 20:44 README
-rw-r--r--@ 1 derrickdebosejr  staff    9617 May  2 21:50 apint.c
-rw-r--r--@ 1 derrickdebosejr  staff    1205 May  2 20:38 apint.h
-rw-r--r--  1 derrickdebosejr  staff  662008 May  2 21:53 apint.h.gch
-rw-r--r--  1 derrickdebosejr  staff    4408 May  2 21:53 apint.o
-rw-r--r--  1 derrickdebosejr  staff      43 May  2 21:55 pa2submissionfile.txt
bash-3.2$ at[K[Kcar[Kt README
Derrick DeBose
ID#1536268

apint.c is the file that is the Apint ADT that creates apints from strings or ints and can manipulate the data with methods to add, subtract, and multiply the numbers. and can print out the apint to the system

apint.h is the header file to apint.c and has the prototypes to the apint.c methods

PA2.c this is the main code that tests the Apint ADT and uses the print, add, subtract, and multiply methods.

Makefile used to compile the code

README Current file to explain the files in directory

NoteToGrader a short note to describe my approach.bash-3.2$ cat NoteTiGreader[1Pader[1PGraderoGrader[C[C[C[C[C[C
Derrick DeBose
Student #1532668

Apint methods

The 3 creation methods are newApint, newApintStr, NewApintInt.

newApint allocates memory for the paint structure.

newApintStr takes a string of integers and stores the data into the apint ADT with the allocated memory from newApint

newApintInt takes a integer and converts it to a string and stores the data into the apint ADT with the allocated memory from newApint

The add method in my code starts at the back of the list we add the 2 ints and then calculate carry based on the sum. The result stores the sum.

The subtract method in my code first determines which number is bigger in size. If the second number is larger than the first then we will subtract the second number from the first and set the difference to negative. We subtract a-b when a>b and b-a when b>a. The difference is a-b = result.

The multiply method first determines which number is bigger in size. Total is calculated by multiplying the 2 apints and adding by the carry at that index then uses a shift method to shift the data in order for there to be zeros at the end to hold the long multiplication process. The arguments passed in are a x b = result and the total apint is an empty apint that is used to be passed into the shift method

The shift method to shift the data in order for there to be zeros at the end to hold multiplication process. Method used in the multiply function to add b zeros to the end of the apint.

The print method checks if the apint passed in is zero and will print out zero otherwise prints out the number and removes all the leading zeros in the apint.

bash-3.2$ car[Kt apint.h
/*CREATED: Derrick DeBose April 27, 2018
 CHANGED: May 2, 2018
 
 apint.h is the header file to apint.c and has the prototypes to the apint.c methods
 
 */

#ifndef _apint_
#define _apint_
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

//the structure for the apint ADT
typedef struct newAPINTStruct *apint;//stores pointers to an array of int and to an int

//creation methods
void newApint(apint *a);// a pointer to the struct
void newApintStr(apint *apI, char c[]);//converts a string of ints to an apint
void newApintInt(apint *apI, int a);//method accepts an int and converts it to an apint

//Manipulation methods
void print(apint a);//method used to print out an apint
void add(apint a, apint b, apint result);//adds 2 apints and store the sum in result
void subtract(apint a, apint b, apint result);//subracts 2 apints and store the differnce in result
apint shift(apint a,int b);//method used in the multiply function to add b zeros to the end of the apint
void multiply(apint a, apint b,apint total, apint result);//method used to multiply a and b and store the product in result and the total argument is used as an apint to pass into the shift method


#endif
bash-3.2$ cat apint.c
/*
 CREATED: Derrick DeBose April 27, 2018
 CHANGED: May 2, 2018
 
 apint.c is the file that is the apint ADT that creates apints
 from strings or ints and can manipulate the data with methods to add,
 subtract, and multiply the numbers. There is a method that can print out the apint to the system

*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include "apint.h"
#define MAXARRAY 100
#define TRUE 1
#define FALSE 0

/*
 This struct is the Arbitrary Precession Integer
 */
typedef struct newAPINTStruct{
    int *number;//array of ints to represent an apint
    int boolean;//negative flag
}newAPINTStruct;

/*
 Method accepts a pointer an apint struct and allocates memory for the apint
 */
void newApint(apint *a){// a pointer to the struct
    (*a)= calloc(1,sizeof(apint));//allocate memory for the apint pointer
    (*a)->number= calloc(MAXARRAY,sizeof(int));//allocate memory for the array
    for(int j=0;j<MAXARRAY;j++){
        (*a)->number[j]=0;//set the array to zero
    }
    
    (*a)->boolean = FALSE;//set the negative flag to false
}

/*
 Method accepts a pointer an apint struct and a string of characters that will be put into the apint structure
 */
void newApintStr(apint *api, char c[]) {//converts a string of ints to an apint
    int length = strlen(c);//length of the string
    for(int k=0;k<length-1;k++){
        if(c[k]=='-'){//check to see if the number is negative
            (*api)->boolean= TRUE;
            
        }
    }
    int counter = MAXARRAY-1;//start from the back of the int array
    for( int i=length-1;i>=0;i--){//start at the end of the string
        if(c[i]=='-'){//check for a negative sign
            (*api)->number[counter] =(c[i]-'-');
        }
        
        else if(c[i]=='+'){//check for a positive sign
            (*api)->number[counter] =(c[i]-'+');
        }
        
        else{//converts the char to a number and stores it in the array
            (*api)->number[counter] =(c[i]-'0');
        }
        
        counter--;
    }
}

/*
 Method accepts a pointer an apint struct and an int that will be put into the apint structure
 */
void newApintInt(apint *api, int a) {
    char c[MAXARRAY];//allocates memory for a string
    sprintf(c,"%d",a);//method converts an int to a string
    int length= strlen(c);
    for(int k=0;k<=MAXARRAY-1;k++){
        if(c[k]=='-'){//check to see if the number is negative
            (*api)->boolean= TRUE;
        }
    }
    int counter = MAXARRAY-1;
    for( int i=length-1;i>=0;i--){
        if(c[i]=='-'){//check for a negative sign
            (*api)->number[counter] =(c[i]-'-');
        }
        
        else if(c[i]=='+'){//check for a positive sign
            (*api)->number[counter] =(c[i]-'+');
        }
        
        else{//converts the char to a number and stores it in the array
            (*api)->number[counter] =(c[i]-'0');
            
        }
        counter--;
    }
}

/*
The print method checks if the apint passed in is
zero and will print out zero otherwise prints out the number and removes all the leading zeros in the apint.
*/
void print(apint a){//method used to print out an apint
    if(a->boolean == TRUE){//if the number is negative
        printf("-");
    }
    int counter =0;
    while(a->number[counter]==0){//checks ends when has passed all the leading zeros
        counter++;
        if(counter == MAXARRAY){//if made it to the max array then there is a 0 stored
            printf("0");
        }
    }
    for(int i=0+counter;i<MAXARRAY; i++){//starts from counter to maxarray
        printf("%d", a->number[i]);;//add number to the back of string
    }
    printf("\n\n");
}

/*The add method in my code starts at the back of the list we add the 2 ints
 and then calculate carry based on the sum. The result stores the sum.
 The arguments are a+b=result
*/
void add(apint a, apint b, apint result){//adds 2 apints and store the sum in result
    int carry =0;//used to determine what needs to be carried
    int total =0;//used as a temp to determine int needs to be stored in the array
    for(int i=MAXARRAY-1;i>=0;i--){//start at the back of the list to add
        total = (a->number[i])+(b->number[i])+carry;//total is the addition of the 2 numbers including the carry
        (result->number[i])=total%10;//if total is  15 or 25, result=5
        total=total/10;//if total is 15 or 25, total 1,2
        carry= total;
    }
}

/*
 The subtract method in my code first determines which number is bigger in size.
 If the second number is larger than the first then we will subtract the second number from the first
 and set the difference to negative. We subtract a-b when a>b and b-a when b>a.
 The difference is a-b = result
*/
void subtract(apint a, apint b, apint result){
    int carry =0;
    for(int i=0;i<=MAXARRAY-1;i++){//loop to determine which number is larger
        if((a->number[i])>(b->number[i])){//if a is bigger in size
            result->boolean=FALSE;//then difference must not be negative
            for(int j = MAXARRAY-1;j >= 0;j--){//start from the back of the array
                if((a->number[j]+carry)>=(b->number[j])){//we can just subtract if the top item is larger
                    (result->number[j])=a->number[j]-(b->number[j])+carry;//subtract and include the carry
                    carry =0;//carry must be 0
                }
                else{//if i need to carry and b is bigger than a
                    a->number[j]=a->number[j]+10;//add 10 to the top function is equivalent to carrying
                    result->number[j]=a->number[j]-b->number[j]+carry;//then you may subtract
                    carry = -1;//carry a -1 if need to be carried
                    
                }
            }
            break;//escape the i for loop
        }
        if((b->number[i])>(a->number[i])){//if b is bigger in size
            result->boolean = TRUE;//then difference must be negative
            for(int j = MAXARRAY-1;j >= 0;j--){//start from the back of the array
                if((b->number[j]+carry)>=a->number[j]){//subtract the bigger number by smaller one and set to negative
                    result->number[j]=b->number[j]-a->number[j]+carry;//subtract and include the carry
                    carry =0;//carry must be 0
                }
                else{//if i need to carry and a is bigger than b
                    b->number[j]=b->number[j]+10;//add 10 to the larger function is equivalent to carrying
                    result->number[j]=b->number[j]-a->number[j]+carry;//then you may subtract
                    carry = -1;//carry a -1 if need to be carried
                    
                }
            }
            break;//escape the i for loop
        }
    
    }
}

/*
The shift method to shift the data in order for there to be zeros at the end to hold multiplication process.
Method used in the multiply function to add b zeros to the end of the apint.
*/
apint shift(apint a, int b){
    apint total;//a temp int to transfer the data
    newApint(&total);
    for(int i=MAXARRAY-1;i>=0+b;i--){
        total->number[i-b]=a->number[i];//more the data b spaces to the left
    }
    return total;
}

/*
The multiply method first determines which number is bigger in size.
Total is calculated by multiplying the 2 apints and adding by the carry at that index then uses a shift method
to shift the data in order for there to be zeros at the end to hold the long multiplication process.
The arguments passed in are a x b = result and the total apint is an
empty apint that is used to be passed into the shift method
*/
void multiply(apint a, apint b, apint total, apint result){
    int carry=0;
    if(a->boolean==b->boolean){//test to figure out if product is negative or not
        result->boolean=FALSE;
    }else{
        result->boolean = TRUE;
    }
    for(int i=0;i<=MAXARRAY-1;i++){//loop to figure out which operation goes on top and which goes on the bottom
        if((a->number[i])>(b->number[i])){//if the first apint element is larger
            for(int j=MAXARRAY-1;j>=0;j--){
                carry=0;
                for(int k=MAXARRAY-1;k>=0;k--){
                    (total->number[k])=(a->number[k])*(b->number[j])+carry;//multipy a and b and add carry
                    carry = (total->number[k])/10;//carry is total over 10 for example if total is 54 then carry is 5
                    (total->number[k])= (total->number[k])%10;//mod by 10 to get rid of the higher order terms
                }
                total = shift(total,MAXARRAY-1-j);//method to know how much to shift data to the left
                add(total,result,result);//add the total of the mulitpy and n is the running total of the whole process
            }
            break;
        }
        if((b->number[i])>(a->number[i])){//if the second apint element is larger
            for(int j=MAXARRAY-1;j>=0;j--){
                carry=0;
                for(int k=MAXARRAY-1;k>=0;k--){
                    (total->number[k])=(a->number[k]*b->number[j]+carry);//multipy a and b and add carry
                    carry = (total->number[k])/10;//carry is total over 10 for example if total is 54 then carry is 5
                    (total->number[k])= (total->number[k])%10;//mod by 10 to get rid of the higher order terms
                }
                total =shift(total,MAXARRAY-1-j);//method to know how much to shift data to the left
                add(total,result,result);//add the total of the mulitpy and n is the running total of the whole process
            }
            break;
        }
    }
}



bash-3.2$ make
make: Nothing to be done for `all'.
bash-3.2$ ls -l
total 1464
-rw-r--r--@ 1 derrickdebosejr  staff     624 Apr 26 11:12 Makefile
-rw-r--r--@ 1 derrickdebosejr  staff    1616 May  2 21:43 NoteToGrader
-rwxr-xr-x  1 derrickdebosejr  staff   13228 May  2 21:53 PA2
-rw-r--r--@ 1 derrickdebosejr  staff    4406 May  2 21:20 PA2.c
-rw-r--r--  1 derrickdebosejr  staff    4868 May  2 21:53 PA2.o
-rw-r--r--@ 1 derrickdebosejr  staff     574 Apr 30 20:44 README
-rw-r--r--@ 1 derrickdebosejr  staff    9617 May  2 21:50 apint.c
-rw-r--r--@ 1 derrickdebosejr  staff    1205 May  2 20:38 apint.h
-rw-r--r--  1 derrickdebosejr  staff  662008 May  2 21:53 apint.h.gch
-rw-r--r--  1 derrickdebosejr  staff    4408 May  2 21:53 apint.o
-rw-r--r--  1 derrickdebosejr  staff   14462 May  2 21:56 pa2submissionfile.txt
bash-3.2$ cat PA@[K2.c
/*
 CREATED: Derrick DeBose April 27, 2018
 CHANGED: May 2, 2018
 
This is the main code that tests the Apint ADT. It makes apints and uses them to print, add, subtract, and multiply
 
*/

#include "apint.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

int main(void){
    //strings a-f i will be using to convert into apints
    char a[100]={"+23875903272098752"};
    char b[100]={"-513123412341235451345325431241235"};
    char c[100]={'0','1','2','3','4','5','6','7','8','9','\0'};
    char d[100]={"41541123961"};
    char e[100]={"997878676585877869"};
    char f[100]={"66567676858777656786765"};
    
    
    //int that will be converted to an apint
    int i = -238527;
    int j = 400;
    int k = 20;
    
    //pointers to apint structs
    apint myApint1, myApint2, myApint3, myApint4, myApint5, myApint6, myApint7, myApint8, myApint9,
    myApint10, myApint11, myApint12, myApint13, myApint14, myApint15, myApint16, myApint17;
    
    //a default constructor to allocate memory for Apints
    newApint(&myApint1);
    newApint(&myApint2);
    newApint(&myApint3);
    newApint(&myApint4);
    newApint(&myApint5);
    newApint(&myApint6);
    newApint(&myApint7);
    newApint(&myApint8);
    newApint(&myApint9);
    newApint(&myApint10);
    newApint(&myApint11);
    newApint(&myApint12);
    newApint(&myApint13);
    newApint(&myApint14);
    newApint(&myApint15);
    newApint(&myApint16);
    newApint(&myApint17);
    
    
    //creates an apint from a string
    newApintStr(&myApint1, a);
    newApintStr(&myApint2, b);
    newApintStr(&myApint3, c);
    newApintStr(&myApint4, d);
    newApintStr(&myApint5, e);
    newApintStr(&myApint6, f);
    
    //creates an apint from an int
    newApintInt(&myApint10,i);
    newApintInt(&myApint12,j);
    newApintInt(&myApint13,k);
    
    //Add method takes the sum of first 2 Apint arguments and stores the sum in the 3rd one
    add(myApint5,myApint6,myApint7);
    
    //Subtract method takes the difference of first 2 Apint arguments and stores the difference in the 3rd one
    subtract(myApint3,myApint4,myApint8);
    
    //Multiply method takes the difference of first 2 Apint arguments
    //and an empty Apint 3rd one, and stores the product in the 4th argument
    multiply(myApint1,myApint2,myApint11, myApint9);
    
    //Add method takes the sum of first 2 Apint arguments and stores the sum in the 3rd one
    add(myApint12,myApint13,myApint14);
    
    //Multiply method takes the difference of first 2 Apint arguments
    //and an empty Apint 3rd one, and stores the product in the 4th argument
    multiply(myApint12,myApint13,myApint17, myApint16);
    
    //Subtract method takes the difference of first 2 Apint arguments and stores the difference in the 3rd one
    subtract(myApint12,myApint13,myApint15);
    
    
    //string of numbers to apint print statement
    printf("I will will be printing char a[] %s with a '+' in the front of the string and printing as an apint: ", a);
    print (myApint1);
    printf("I will will be printing char b[] %s with a '-' in the front of the string and printing as an apint: ", b);
    print (myApint2);
    
    //int to string print statement
    printf("I will will be printing int i with a %d and printing as an apint: ",i);
    print (myApint10);
    
    
    printf("I will be adding %d and %d and their sum is: ",j,k);
    print (myApint14);
    
    printf("I will be subtracting %d and %d and their difference is: ",j,k);
    print (myApint15);
    
    printf("I will be multiplying %d and %d and their product is: ",j,k);
    print (myApint16);
    
    //print sum
    printf("I will be adding %s and %s and their sum is: ",e,f);
    print (myApint7);
    
    //print difference
    printf("I will be subtracting %s and %s and their difference is: ",c,d);
    print (myApint8);
    
    //print product
    printf("I will be multiplying %s and %s and their product is: ",a,b);
    print (myApint9);
    
    //free up the allocated memory
    free(myApint1);
    free(myApint2);
    free(myApint3);
    free(myApint4);
    free(myApint5);
    free(myApint6);
    free(myApint7);
    free(myApint8);
    free(myApint9);
    free(myApint10);
    free(myApint11);
    free(myApint12);
    free(myApint13);
    free(myApint14);
    free(myApint15);
    free(myApint16);
    free(myApint17);
    
    
    return 0;
}
bash-3.2$ ./PA2
I will will be printing char a[] +23875903272098752 with a '+' in the front of the string and printing as an apint: 23875903272098752

I will will be printing char b[] -513123412341235451345325431241235 with a '-' in the front of the string and printing as an apint: -513123412341235451345325431241235

I will will be printing int i with a -238527 and printing as an apint: -238527

I will be adding 400 and 20 and their sum is: 420

I will be subtracting 400 and 20 and their difference is: 380

I will be multiplying 400 and 20 and their product is: 8000

I will be adding 997878676585877869 and 66567676858777656786765 and their sum is: 66568674737454242664634

I will be subtracting 0123456789 and 41541123961 and their difference is: -41417667172

I will be multiplying +23875903272098752 and -513123412341235451345325431241235 and their product is: -12251284959708580656513773948968667334806854438720

bash-3.2$ exit
exit

Script done on Wed May  2 21:58:55 2018
